plugins {
    id "com.android.application"
    id "kotlin-android"
    id "maven-publish"
    id "dagger.hilt.android.plugin"
    id "kotlin-kapt"
    id "org.jlleitschuh.gradle.ktlint"
    id "jacoco"
}

jacoco {
    toolVersion = "0.8.7"
}

android {
    compileSdk project.androidTarget.toInteger()

    defaultConfig {
        applicationId "com.github.rogerp91.mao_trailer_android.mao_trailer.application"
        minSdk project.androidMinSdk.toInteger()
        targetSdk project.androidTarget.toInteger()
        versionCode project.versionCode.toInteger()
        versionName project.versionName

        consumerProguardFiles "consumer-rules.pro"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }

        debug {
            testCoverageEnabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "11"
    }

    resourcePrefix "app_"

    buildFeatures {
        dataBinding = true
        viewBinding = true
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation project(path: ':feature-movies')
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation "androidx.constraintlayout:constraintlayout:2.1.3"

    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.4.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.0"
    implementation "androidx.navigation:navigation-fragment-ktx:2.3.5"
    implementation "androidx.navigation:navigation-ui-ktx:2.3.5"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesAndroidVersion"

    implementation "com.google.dagger:hilt-android:$daggerHiltVersion"
    kapt "com.google.dagger:hilt-android-compiler:$daggerHiltVersion"
    kapt "androidx.hilt:hilt-compiler:$hiltCompilerVersion"

    testImplementation "junit:junit:$junitVersion"
    testImplementation "com.google.dagger:hilt-android-testing:$daggerHiltVersion"
    testAnnotationProcessor "com.google.dagger:hilt-compiler$daggerHiltVersion"

    androidTestImplementation "androidx.test.ext:junit:1.1.3"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.4.0"
}

ktlint {
    debug = true
    kotlinScriptAdditionalPaths {
        include fileTree("scripts/")
    }
    filter {
        exclude("**/generated/**")
        exclude("src/test/**/*.kt")
        include("**/kotlin/**")
    }
}


task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        html.enabled = true
        xml.enabled = true
    }
    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}
